name: CI/CD Pipeline

on:
  push:
    branches:
      - master # Déclenche l'action sur les push vers la branche master
  pull_request:
    branches:
      - master # Déclenche l'action lors des PR vers la branche master

permissions:
  contents: read
  id-token: write

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 1 : Configurer Node.js pour le backend
      - name: Set up Node.js for backend
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      # Étape 2 : Installer les dépendances du backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      # Étape 3 : Exécuter les tests du backend
      - name: Run backend tests
        run: |
          cd backend
          npm test

      # Étape 4 : Vérifier la connexion à la base de données MongoDB
      - name: Check MongoDB connection
        run: |
          cd backend
          node -e "import('./data/db.mjs').then(({ default: connect }) => connect()).catch(err => { console.error('MongoDB connection failed', err); process.exit(1); })"

      # Étape 5 : Déployer le backend sur Vercel
      - name: Deploy backend to Vercel
        run: |
          cd backend
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm

  frontend:
    runs-on: ubuntu-latest
    needs: backend # Le frontend dépend du backend, donc il doit être déployé en premier
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 1 : Installer les dépendances du frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # Étape 2 : Exécuter les tests du frontend
      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      # Étape 3 : Build du frontend (React)
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Étape 4 : Déployer le frontend sur Vercel
      - name: Deploy frontend to Vercel
        run: |
          cd frontend
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm

  # Job pour vérifier l'intégration entre le frontend et le backend (facultatif)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend] # Ce job dépend de la réussite des jobs frontend et backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          # Tu peux lancer des tests d'intégration ici pour vérifier que le frontend et le backend fonctionnent ensemble
          # Exemple d'utilisation de Cypress ou d'autres outils de tests
          npm run test:integration
