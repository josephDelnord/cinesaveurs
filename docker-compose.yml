# version: '3.8' de Docker Compose
version: '3.8'

services:

  # Service MongoDB
  db:
    image: mongo:latest  # Utilise l'image officielle MongoDB
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}  # Nom d'utilisateur root de MongoDB
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}  # Mot de passe root de MongoDB
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}  # Base de données par défaut
    volumes:
      - db_data:/data/db  # Persistance des données de MongoDB
    ports:
      - "27017:27017"  # Le port par défaut de MongoDB
    networks:
      - app-network  # Connexion au réseau privé

  # Service Backend (Node.js API)
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile  # Construire à partir du Dockerfile du backend
    ports:
      - "5000:5000"  # Le backend écoute sur le port 5000
    environment:
      - MONGO_URI=${MONGO_URI}  # URI de connexion à MongoDB
      - PORT=${PORT}
      - SEED_DB=${SEED_DB}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - SECRET=${SECRET}
    volumes:
      - ./backend:/app  # Monte le code source du backend dans le conteneur
      - /app/node_modules  # Empêche le répertoire node_modules de se mélanger entre le conteneur et la machine locale
    depends_on:
      - db  # Le backend dépend de MongoDB, il démarre après MongoDB
    command: ["bash", "-c", "./wait-for-it.sh db:27017 -- npm run dev"] # Attendre que MongoDB soit prêt avant de démarrer le backend
    restart: unless-stopped  # Redémarre le backend en cas d'erreur
    networks:
      - app-network  # Connexion au réseau privé

  # Service Frontend (React)
  frontend:
    build:
      context: ./frontend  # Le répertoire du frontend
      dockerfile: Dockerfile  # Utilise le Dockerfile situé dans frontend/
    ports:
      - "80:80"  # Le frontend est servi sur le port 80
    depends_on:
      - backend  # Le frontend dépend du backend
    networks:
      - app-network  # Connexion au réseau privé
    command: ["nginx", "-g", "daemon off;"]  # Démarre Nginx avec le service web Nginx
    restart: unless-stopped  # Redémarre le frontend en cas d'erreur

  # adminMongo (outil de gestion MongoDB)
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 4000:8080  # Adminer sera accessible sur localhost:4000
    depends_on:
      - db  # Adminer dépend de MongoDB
    networks:
      - app-network  # Connexion au réseau privé

networks:
  app-network:
    driver: bridge  # Utilisation d'un réseau de type bridge pour la communication entre services

volumes:
  db_data:
    driver: local  # Volume persistant pour les données MongoDB
