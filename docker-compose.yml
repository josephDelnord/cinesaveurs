services:
  backend:
    # Nom du conteneur pour le backend
    container_name: backend
    build:
      # Dossier dans lequel Docker cherchera le Dockerfile et le code pour construire l'image du backend
      context: ./backend
      # Le fichier Dockerfile spécifique pour le backend (API)
      dockerfile: Dockerfile.api
    ports:
      # Mappe le port 5000 de l'hôte vers le port 5000 du conteneur, pour accéder à l'API backend
      - "5000:5000"
    environment:
      # Définit les variables d'environnement pour le conteneur backend
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI_FOR_PROD:-mongodb://cinedelicesuser:cinedelicespassword@172.25.85.83:27017/cinedelicesdb}
      - JWT_SECRET=${JWT_SECRET:-secretkey}
      - SECRET=${SECRET:-secretkey}
      - FRONTEND_URL=http://frontend
      - SEED_DB=${SEED_DB:-true}
    env_file:
      # Charge le fichier .env du backend contenant des variables d'environnement
      - ./backend/.env
    depends_on:
      # Le backend dépend de MongoDB, il attendra que MongoDB soit prêt avant de démarrer
      - mongodb
    networks:
      # Le backend se connecte au réseau `app-network` pour communiquer avec d'autres services
      - app-network
    volumes:
      # Monte le dossier local ./backend dans le conteneur sous /app (pour développement local, permet d'accéder au code source)
      - ./backend:/app
      # Assure que les node_modules du conteneur soient persistants et ne soient pas écrasés par le volume local
      - /app/node_modules

  frontend:
    # Nom du conteneur pour le frontend
    container_name: frontend
    build:
      # Dossier contenant le Dockerfile et le code pour construire l'image du frontend
      context: ./frontend
      # Le fichier Dockerfile spécifique pour le frontend
      dockerfile: Dockerfile.cli
    ports:
      # Mappe le port 80 de l'hôte vers le port 80 du conteneur pour accéder au frontend via le navigateur
      - "80:80"
    environment:
      # Définit les variables d'environnement pour le conteneur frontend
      - HTTPS=${HTTPS:-false}
      - SSL_CRT_FILE=${SSL_CRT_FILE:-frontend/ssl/certificate.crt}
      - SSL_KEY_FILE=${SSL_KEY_FILE:-frontend/ssl/private.key}
      - NODE_ENV=production
    env_file:
      # Charge le fichier .env du frontend
      - ./frontend/.env
    depends_on:
      # Le frontend dépend du backend, il attendra que le backend soit prêt avant de démarrer
      - backend
    networks:
      # Le frontend se connecte au réseau `app-network` pour communiquer avec d'autres services
      - app-network
    volumes:
      # Monte le dossier local ./frontend dans le conteneur sous /app (pour développement local, permet d'accéder au code source)
      - ./frontend:/app
      # Assure que les node_modules du conteneur soient persistants
      - /app/node_modules
      # Monte le répertoire contenant les certificats SSL pour HTTPS dans le conteneur
      - ./frontend/ssl:/app/ssl

  mongodb:
    # Utilise l'image MongoDB officielle avec la version la plus récente
    image: mongo:latest
    # Nom du conteneur pour MongoDB
    container_name: mongodb
    command: ["--auth"] # Active l'authentification pour MongoDB (nécessite des utilisateurs et des mots de passe)
    environment:
      # Définit les variables d'environnement pour MongoDB
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    env_file:
      # Charge le fichier .env du backend pour obtenir les variables d'environnement
      - ./backend/.env
    volumes:
      # Monte le volume persistant pour les données de MongoDB
      - mongodb-data:/data/db
    ports:
      # Mappe le port 27017 de l'hôte vers le port 27017 du conteneur pour accéder à MongoDB
      - "27017:27017"
    restart: unless-stopped # Redémarre MongoDB sauf si il est explicitement arrêté
    networks:
      # MongoDB se connecte au réseau `app-network` pour communiquer avec d'autres services
      - app-network
    dns:
      # Définit le serveur DNS à utiliser (Google DNS)
      - 8.8.8.8
      # Deuxième serveur DNS (Google DNS)
      - 8.8.4.4

# Déclare un volume persistant nommé mongodb-data pour les données de MongoDB
volumes:
  mongodb-data:
    name: mongodb-cinedelices-data # Nom du volume persistant

# Déclare le réseau utilisé par vos services Docker
networks:
  app-network:
    # Utilise le pilote réseau `bridge` pour la communication entre les services Docker
    driver: bridge
